mat2 <- cbind(vec1,vec2,vec3); mat2
# 행, 열 이름 없애고싶으면 rownames=NULL, colnames=NULL
mat1[1,1]
mat1[2,];mat1[,3]
mat1
mat1 <- rbind(vec1,vec2,vec3); mat1
mat1
mat1[2,]
mat1[2,];mat1[,3]
mat1[1,1,drop=F]
summary(mat1)
x2
mean(x2[2,])
sum(x2[2,])
rowSums(x2
rowSums(x2);
rowSums(x2); colSums(x2)
?apply
x2
apply(x2,1,sum)
apply(x2,2,sum)
str(x2)
class(x2)
2
x2
# Array
a1 <- array(1:30, dim=c(2,3,5))
a1
score <- c(1,3,2,4,2,1,3,5,1,3,3,3)
class(score)
class(score)
# class: 개체를 분류해준다.
summary(score)
f_score <- factor(score)
f_score
# factor; score 개체가 팩터개체로 바뀐다. 숫자도 결국은 문자열이 된다.
class(f_score)
f_score
# level: factor 데이터가 가질 수 있는 값의 범위.
# 1,2,3,4,5 중에 하나의 값을 가진다.
summary(f_score)
plot(score)
data1 <- c("월","수","토","월","목","화")
data1
class(data1)
summary(data1)
day1<-factor(data1)
day1
class(day1)
summary(day1)
week.korabbname <- c("일","월","화","수","목","금","토")
day2 <- factor(data1, levels=week.korabbname)
day2
levels(day2)
# data1에 금, 일이 없어서 levels를 하면 금 일이 빠져 나온다.
# 그래서 보충해주기 위해 levels라는 매개변수에 week.korabbname을 담아준다.
day2
summary(day2)
btype <- factor(c("A","O","AB","B","O","A"), levels=c("A","B","O"))
btype
# levels에 없는 결측치는 NA로 나온다.
summary(btype)
btype
# levels에 없는 결측치는 NA로 나온다.
summary(btype)
levels(btype)
gender <- factor(c(1,2,1,1,1,2,1,2), levels=c(1,2), labels=c("남성","여성"))
gender
summary(gender)
levels(gender)
# 내장 데이터셋
data()
iris; head(iris); tail(iris)
View(iris)
# drop=F, 열이 하나더라도 구조를 깨뜨리지 않고 보여줌
fruit[, c(3,4)]
fruit <- data.frame(no, name, qty, price)
#Dataframe 실습
no <- c(1,2,3,4)
name <- c('Apple','Banana','Peach','Berry')
qty <- c(5,2,7,9)
price <- c(500,200,200,500)
fruit <- data.frame(no, name, qty, price)
# drop=F, 열이 하나더라도 구조를 깨뜨리지 않고 보여줌
fruit[, c(3,4)]
fruit
fruit$qty
fruit[,3]
fruit[,3, drop=F]
# 3번째 열 이름이 qty, column 이름을 하나만 지정할 수 있다.
fruit[[3]]
fruit[3]
str(fruit$qty) #벡터로 꺼낸다
fruit[3]
fruit$qty
str(fruit[3]) #데이터프레임 구조 유지하면서 꺼낸다
df_midterm2 <- data.frame(
c(90, 80, 60, 70),
c(50, 60, 100, 20),
c(1,1,2,2))
df_midterm2
df_midterm2$영어
df <- data.frame(var1=c(4,3,8),
var2=c(2,6)) # 오류
# observation 개수가 달라서 오류
df <- data.frame(var1=c(4,3,8),
var2=c(2,6,1))
df
str(df)
df$var_sum <- df$var1 + df$var2
# 파생변수를 만든다. 새로이 추가된 변수. 전처리과정에서 자주 쓰인다.
df$var_sum
df$var_mean <- df$var_sum/2
df$result <- ifelse(df$var1>df$var2,
"var1이 크다", "var1이 작다")
df$result
df_midterm2 <- data.frame(
c(90, 80, 60, 70),
c(50, 60, 100, 20),
c(1,1,2,2))
colnames(df_midterm2)
rownames(df_midterm2)
names(df_midterm2)
df_midterm2
df_midterm2 <- data.frame(
영어=c(90, 80, 60, 70),
수학=c(50, 60, 100, 20),
클래스=c(1,1,2,2))
df_midterm2
df_midterm2$영어
df <- data.frame(var1=c(4,3,8),
var2=c(2,6,1))
df
str(df)
df$var_sum <- df$var1 + df$var2
# 파생변수를 만든다. 새로이 추가된 변수. 전처리과정에서 자주 쓰인다.
df$var_sum
df$var_mean <- df$var_sum/2
df$result <- ifelse(df$var1>df$var2,
"var1이 크다", "var1이 작다")
# ifelse:  앞의 내용이 참이면 첫번째 argument, 거짓이면 두번째 argument)
getwd() # setwd('xxx')
# csv파일열기 (comma separated value)
# csv파일은 첫번째 행은 무조건 이름으로 인식
score <- read.csv("data/score.csv")
# 위의 경로는 상대패스. 현재 있는 위치에서 쓸 수 있음
# 절대패스로 read.csv("c:/Rstudy/data/score.csv")로 할 수도 있음. 아무 위치에서나 가능
score
str(score)
# 왜 numeric이 아닌 integer로 나오는가?
# csv 데이터 읽을 때 좀더 구체적으로 타입 명시해줌
score$sum <- score$math+score$english+score$science
score$result <- ifelse(score$sum >= 200,
"pass", "fail")
score
str(score)
# 새로 추가되는 데이터프레임은 자동으로 factor가 되지 않고 character가 된다.
table(score$result)
summary(score$result)
str(score)
score
score$result <- ifelse(score$sum >= 200,
"pass", "fail")
# 왜 numeric이 아닌 integer로 나오는가?
# csv 데이터 읽을 때 좀더 구체적으로 타입 명시해줌
score$sum <- score$math+score$english+score$science
emp <- read.csv(file.choose(),
stringsAsFactors = F)
emp <- read.csv(file.choose(),
stringsAsFactors = F)
# file.choose: 읽고자하는 파일을 선택할 수 있도록 해준다.
emp
str(emp)
# 1. emp에서 직원 이름 - 데이터프레임구조를 유지하느냐 마느냐의 차이일 뿐 똑같다.
emp$ename
# 4. ename이 "KING"인 직원의 모든 정보
emp[9,]
emp$ename=="KING"
emp[c(F,F,F,F,F,F,F,F,T,F,F,F,
F,F,F,F,F,F,F,F),]
emp$ename=="KING"
which(emp$ename=="KING")
emp$ename=="KING"
emp[emp$ename=="KING",]
# 4. ename이 "KING"인 직원의 모든 정보
emp[9,]
emp$ename=="KING"
emp[c(F,F,F,F,F,F,F,F,T,F,F,F,
F,F,F,F,F,F,F,F),]
emp[emp$ename=="KING",]
# 행의 index에 추출하고자 하는 행의 index를 줘도 되고,
# true/false로 구성되는 벡터를 줘도 되고,
# 원하는 조건의 비교식을 줘도 된다.
subset(emp,subset= emp$ename=="KING")
subset(emp,emp$ename=="KING")
#subset이 두번째 매개변수라 생략도 가능
?subset
emp
emp[emp$sal>=2000,c("ename","sal")]
emp$sal>=2000
# 6. select ename,sal from emp where sal between 2000 and 3000
subset(emp, select=c("ename","sal"), subset=(sal>=2000 & sal<=3000))
emp[emp$sal>=2000 & emp$sal <=3000, c("ename","sal")]
emp[!is.na(emp$comm), c("ename", "comm")]
# 문제6
name <- c("Potter","Elsa","Gates","Wendy","Ben") # 워드에서 복사할 땐 ""는 다시 써줘야 한다.
gender <- factor(c("M","F","M","F","M"))
math <- c(85, 76, 99, 88, 40)
df4 <- data.frame(name,gender,math, stringsAsFactors=F); df4
str(df4)
class(df4$name)
class(df4$gender)
class(df4$math)
# 문제7
emp
getwd()
read.csv('c://Rstudy/data/emp.csv')
str(emp)
emp <- read.csv('c://Rstudy/data/emp.csv')
str(emp)
class(emp)
# 문제12
subset(emp, select(ename, sal, deptno), subset= emp$sal>=1000 $ emp$sal <=3000)
subset(emp, select=c("ename","sal","deptno"), subset= (emp$sal >= 1000 & emp$sal <= 3000))
# 문제12
subset(emp, select(ename, sal, deptno), subset= emp$sal>=1000 $ emp$sal <=3000)
# 문제12
subset(emp, select=c('ename', 'sal', 'deptno'), subset= emp$sal>=1000 $ emp$sal <=3000)
# 문제12
subset(emp, select=c('ename', 'sal', 'deptno'), subset= (emp$sal>=1000 $ emp$sal <=3000))
# 문제12
subset(emp, select=c('ename', 'sal', 'deptno'), subset= (emp$sal >= 1000 $ emp$sal <= 3000))
subset(emp, select=c("ename","sal","deptno"), subset= (emp$sal >= 1000 & emp$sal <= 3000))
# 문제12
subset(emp, select=c('ename', 'sal', 'deptno'), subset= (emp$sal >= 1000 $ emp$sal <= 3000))
# 문제12
subset(emp, select=c("ename", "sal", "deptno"), subset= (emp$sal >= 1000 $ emp$sal <= 3000))
# 문제12
subset(emp, select=c("ename","sal","deptno"), subset= (emp$sal >= 1000 & emp$sal <= 3000))
# 문제13
emp[job!=="ANALYST"]
# 문제13
emp[job!="ANALYST"]
# 문제13
emp$job !== "ANALYST"
# 문제13
emp$job != "ANALYST"
# 문제13
emp[emp$job != "ANALYST"]
# 문제13
which(emp$job != "ANALYST")
# 문제13
emp[which(emp$job != "ANALYST")]
# 문제13
emp[emp$job!="ANALYST", c("ename","sal")]
subset(emp, select=c('ename','sal'), subset= job!='ANALYST')
# 문제13
emp[emp$job!="ANALYST", c("ename","sal")]
subset(emp, select=c('ename','sal'), subset= job!='ANALYST')
emp$sal
sort(emp$sal)
head(emp)
# 문제16
sort(emp)
# 문제16
sort(emp$sal)
order(emp$sal)
data(mtcars)
mtcars
head(mtcars)
str(mtcars)
names(mtcars)
#mpt:연비 am: 오토매뉴얼
mtcars %>% group_by(am)
#mpt:연비 am: 오토매뉴얼
library(dplyr)
mtcars %>% group_by(am)
mtcars %>% group_by(am) %>% select(am, mpg)
mtcars %>% group_by(am) %>% mutate(mpg_mean = mean(mpg))
mtcars %>% group_by(am) %>% select(am, mpg) %>% mutate(mpg_mean = mean(mpg))
mtcars %>% group_by(am) %>% summarise(mpg_mean = mean(mpg))
t.test(mpg~am.data=mtcars)
t.test(mpg~am,data=mtcars)
getwd()
readxl('c://Rstudy/mc_1601/data/finedust.xlsx')
library(readxl)
readxl('c://Rstudy/mc_1601/data/finedust.xlsx')
read_excel('c://Rstudy/mc_1601/data/finedust.xlsx')
finedust <- read_excel('c://Rstudy/mc_1601/data/finedust.xlsx')
head(finedust)
View(finedust)
str(finedust)
finedust %>% filter(area == c("성북구, 중구"))
finedust_sj <- finedust %>% filter(area == c("성북구, 중구"))
View(finedust_sj)
finedust_sj <- finedust %>% filter(area == c("성북구", "중구"))
finedust_sj
View(finedust_sj)
finedust_sj <- finedust %>% filter(area == "성북구" & area== "중구"))
finedust_sj <- finedust %>% filter(area == "성북구" | area== "중구"))
finedust
finedust %>% filter(area == "성북구")
finedust %>% filter(area == c("성북구", "중구"))
finedust_sj <- finedust %>% filter(area == c("성북구", "중구"))
View(finedust_sj)
finedust_sj <- finedust %>% filter(area %in% c("성북구", "중구"))
finedust_sj
count(finedust_sj, yyyymmdd)
count(finedust_sj, yyyymmdd) %>% arrange(desc(n))
count(finedust_sj, area) %>% arrange(desc(n))
finedust_sj %>% filter(area=="성북구")
finedust_area_sb <- finedust_sj %>% filter(area=="성북구")
finedust_area_jg <- finedust_sj %>% filter(area=="중구구")
finedust_area_sb
finedust_area_jg
finedust_area_jg
finedust_area_jg <- finedust_sj %>% filter(area=="중구")
finedust_area_jg
install.packages(psych)
install.packages("psych")
library(psych)
describe(finedust_area_sb$finedust)
describe(finedust_area_jg$finedust)
boxplot(finedust_sb$finedust, finedust_jg$finedust,
main = "finedust_compare", xlab = "AREA", names = c("성북구","중구"),
ylab = "FINEDUST_PM", col = c("blue","green"))
boxplot(finedust_area_sb$finedust, finedust_area_jg$finedust,
main = "finedust_compare", xlab = "AREA", names = c("성북구","중구"),
ylab = "FINEDUST_PM", col = c("blue","green"))
t.test(data = finedust_sj, finedust~area, var.equal = T)
mid = c(16,20,21,22,23,22,27,25,27,28)
final = c(19,22,24,24,25,25,26,26,28,32)
t.test(mid,final,paired=T)
getwe()
getwd()
setwe('c://Rstudy/mc_1601')
setwd('c://Rstudy/mc_1601')
read.csv('data/survey.csv')
a = read.csv('data/survey.csv')
head(a)
names(a) = c('position','ans6','ans7')
head(a)
t1 = table(a$position, a$ans6)
t1
t2 = table(a$position, a$ans7)
t2
t1 = table(a$position, a$ans6)
t1 = table(a$position, a$ans6)
t1
a
a
head(a)
t1 = as.data.frame(t1)
t1
t1 = as.data.frame(t1, Var1="Pos")
t1
t2 = as.data.frame(t1)
ts
t2
chisq.test(t1)
t1 = table(a$position, a$ans6)
t2 = as.data.frame(t1)
chisq.test(t1)
t2 = as.data.frame(t1)
t2
library(ggplot2)
names(t2) = c('position','ans6','freq')
names(t2)
t2
ggplot(t2, aes(position,freq))
ggplot(t2, aes(position,freq) + geom_bar(stat='identity'))
ggplot(t2, aes(position,freq)) + geom_bar(stat='identity')
ggplot(t2, aes(position,freq,fill=ans6)) + geom_bar(stat='identity') +
ggplot(t2, aes(position,freq,fill=ans6)) + geom_bar(stat='identity')
ggplot(t2, aes(position,freq)) + geom_bar(stat='identity')
ggplot(t2, aes(position,freq,fill=ans6)) + geom_bar(stat='identity')
ggplot(t2, aes(position,freq,fill=ans6)) +
geom_bar(stat='identity')
ggplot(t2, aes(position,freq,fill=ans6)) + geom_bar(stat='identity',position= 'fill')
iris
names(iris)
result = aov(iris$Sepal.Width~iris$Species, iris)
result
# 세 개의 붓꽃 종류가 꽃 넓이에 의해서 구분이 되느냐?
summary(result)
score = read.csv('.data/score.csv')
getwd()
score = read.csv('data/score.csv')
head(score)
score = score[-1]
head(score)
r = aov(score_stats~gender.fac*class.fac)
r = aov(score_stats~gender.fac*class.fac)
head(score)
r = aov(score$score_stats~gender.fac*class.fac)
attach(score)
r = aov(score_stats~gender.fac+class.fac)
r
summary(r)
df = read.csv('http://goo.gl/hKnl74')
names(df)
head(df)
df = read.csv('http://goo.gl/hKnl74')
df = read.csv('http://goo.gl/HKnl74')
names(df)
head(df)
dim(df)
plot(overall~rides)
dim(df)
plot(overall~rides)
plot(df$overall~rides, )
plot(overall~rides, data=df)
cor(overall, rides)
attach(df)
cor(overall, rides)
cor.text(overall, rides)
cor.test(overall, rides)
plot(df[,4:8])
cor(df[,4:8])
x = cor(df[,4:8])
corrplot(x)
attach(x)
x = cor(df[,4:8])
corrplot(x)
corrplot(x, data=df)
install.packages("corrplot")
library(corrplot)
corrplot(x)
read.excel('data/exam.xlsx')
getwd()
read.excel('data/exam.xlsx')
library(readxl)
read.excel('data/exam.xlsx')
read_excel('data/exam.xlsx')
exam = read_excel('data/exam.xlsx')
exam %>% group_by(SEX)
exam %>% group_by(SEX) %>% mutate(MATH_MEAN = mean(MATH))
exam %>% group_by(SEX) %>% mutate(MATH_MEAN = mean(MATH)) %>%
mutate(ENG_MEAN = mean(ENG))
exam %>% group_by(SEX) %>% summarise(MATH_MEAN = mean(MATH)
exam %>% group_by(SEX) %>% summarise(MATH_MEAN = mean(MATH))
# audi의 cty와 hwy
# hyundai의 cty와 hwy
# suv(class)의 cty와 hwy
mtcars
# audi의 cty와 hwy
# hyundai의 cty와 hwy
# suv(class)의 cty와 hwy
mpg
head(mpg)
str(mpg)
names(mpg)
library(dplyr)
# 1. audi의 cty와 hwy
mpg %>% filter(manufacturer =="audi")
# 1. audi의 cty와 hwy
mpg %>% filter(manufacturer =="audi") %>% select(cty, hwy)
mtcars %>% group_by(am) %>% summarise(mpg_mean = mean(mpg))
mtcars
mpg %>% filter(manufacturer =="audi") %>% select(cty, hwy)
# cty와 hwy
mpg %>% select(cty, hwy)
t.test(cty~hwy, data=mpg)
mtcars %>% group_by(am) %>% summarise(mpg_mean = mean(mpg))
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "Hyundai"))
head(mpg)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer =="Hyundai")
str(mpg)
mpg
View(mpg)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai"))
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai"))
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>% group_by(manufacturer)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>%
group_by(manufacturer) %>% select(cty)
# 1. audi와 Hyundai의 cty 비교
mpg2 = mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>%
group_by(manufacturer) %>% select(cty)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>%
group_by(manufacturer) %>% select(cty)
# 1. audi와 Hyundai의 cty 비교
mpg2 = mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>% group_by(manufacturer) %>% select(cty)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai")) %>%
group_by(manufacturer) %>% select(cty)
# 1. audi와 Hyundai의 cty 비교
mpg %>% filter(manufacturer %in% c("audi", "hyundai"))
# 1. audi와 Hyundai의 cty 비교
mpg2 = mpg %>% filter(manufacturer %in% c("audi", "hyundai"))
t.test(cty~manufacturer, data=mpg2)
str(mpg)
View(mpg)
# 2. chevrolet 와 nissan의 cty 비교
mpg3 = mpg %>% filter(manufacturer %in% c("chevrolet", "nissan"))
mpg3
t.test(cty~manufacturer, data=mpg3)
t.test(cty~manufacturer, data=mpg2)
t.test(cty~manufacturer, data=mpg3)
# 3. compact와 suv의 cty 비교
mpg4 = mpg %>% filter(class %in% c("compact", "suv"))
t.test(cty~class,data=mpg4)
# p-value= 0.1033이므로 audi와 hyundai가 갖는 cty 차이는 우연이다. audi냐 hyundai냐에 따라서 cty 차이가 나지 않는다.
var.test(cty~manufacturer, data=mpg2)
t.test(cty~manufacturer, data=mpg2, var.equal=T)
t.test(cty~manufacturer, data=mpg2, var.equal=F)
