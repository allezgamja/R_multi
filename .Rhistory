cos <- cosine(com)
cos
cos==1
cos[!(cos==1)]
cos==1 <- NA
cos==1 <- "NA"
cos
cos
gsub("1", "***", cos)
cos <- gsub("1", "***", cos)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos
cos <- as.table(cosine(com))
cos
cos <- cos[!(cos==1)]
cos
cos <- as.table(cosine(com))
cos
cos <- cosine(com)
cos
cos <- as.list(cosine(com))
cos
cos <- cosine(com)
cos
install.pacakes("reshape2")
install.packages("reshape2")
library(reshape2)
head(french_fries)
mean(french_fries$potato)
french_fries$potato
mean(french_fries$potato)
french_fries %>% select(potato)
library(dplyr)
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato)
french_fries %>% select(potato) %>% summarise(mean <- mean(potato))
french_fries %>% select(potato) %>% summarise(mean())
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato))
str(french_fries)
french_fries %>% select(potato) %>% summarize(평균=mean(potato))
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% mean()
mean(french_fries$potato, na.rm=T)
french_fries %>% select(potato) %>% summarise(평균= mean(), na.rm=T)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
library(dplyr)
m %>% group_by(potato) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
v
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
# reshape2: 데이터셋의 구조를 바꿔준다.
library(reshape2)
head(french_fries)
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
r <- dcast(m, time+treatment+subject + rep ~ ...)
# id 해당되는 이름을 엮는다. time~rep까지 사용하고 나머지 값을 갖다붙인다.
# 이때는 variable에 있는 애들이 변수값이 된다.
# decast; metl된 것을 다시 원래대로 되돌리겠다.
head(r)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
?next
# 내장 데이터셋
data()
fruit <- data.frame(no, name, qty, price)
fruit[,3] # fruit[,3, drop=F]
fruit <- data.frame(no, name, qty, price)
#Dataframe 실습
no <- c(1,2,3,4)
name <- c('Apple','Banana','Peach','Berry')
qty <- c(5,2,7,9)
price <- c(500,200,200,500)
fruit <- data.frame(no, name, qty, price)
fruit[,3] # fruit[,3, drop=F]
fruit[,3, drop=F]
# file.choose: 읽고자하는 파일을 선택할 수 있도록 해준다.
emp
emp <- read.csv(file.choose(),
stringsAsFactors = F)
# file.choose: 읽고자하는 파일을 선택할 수 있도록 해준다.
emp
str(emp)
# 1. emp에서 직원 이름 - 데이터프레임구조를 유지하느냐 마느냐의 차이일 뿐 똑같다.
emp$ename
emp[,2]
emp[,"ename"]
emp[,"ename",drop=F]
subset(emp, select=c(ename, job, sal))
?subset
# 행의 index에 추출하고자 하는 행의 index를 줘도 되고,
# true/false로 구성되는 벡터를 줘도 되고,
# 원하는 조건의 비교식을 줘도 된다.
subset(emp,subset= emp$ename=="KING")
!is.na(emp$comm)
# subset은 함수, emp는 구문
emp[1,1]
# subset은 함수, emp는 구문
emp[1,3]
emp$sal>=2000 & emp$sal <=3000
# read file data
nums <- scan("data/sample_num.txt")
getwd()
setwd('c://Rstudy')
# read file data
nums <- scan("data/sample_num.txt")
nums
word_ansi <- scan("data/sample_ansi.txt", what="")
# what=""을 안하면 숫자로 인식을 한다.
word_ansi
word_utf8 <- scan("data/sample_utf8.txt", what="", encoding="UTF-8")
word_utf8
word_utf8_new <- scan("data/sample_utf8.txt", what="") #문자열 형식을 읽을 땐 what이 꼭 필요
word_utf8_new # encoding 없으면 한글이 깨진다
word_utf8_new <- scan("data/sample_utf8.txt", what="") #문자열 형식을 읽을 땐 what이 꼭 필요
word_utf8_new # encoding 없으면 한글이 깨진다
# read file data
nums <- scan("data/sample_num.txt")
word_ansi <- scan("data/sample_ansi.txt", what="")
# what=""을 안하면 숫자로 인식을 한다.
word_ansi
word_utf8 <- scan("data/sample_utf8.txt", what="", encoding="UTF-8")
# encoding은 대문자로
word_utf8
word_utf8_new <- scan("data/sample_utf8.txt", what="") #문자열 형식을 읽을 땐 what이 꼭 필요
word_utf8_new # encoding 없으면 한글이 깨진다
lines_ansi <- readLines("data/sample_ansi.txt")
lines_utf8 <- readLines("data/sample_utf8.txt")
lines_utf8
# read file data
nums <- scan("data/sample_num.txt")
word_ansi <- scan("data/sample_ansi.txt", what="")
word_ansi
# what=""을 안하면 숫자로 인식을 한다.
word_ansi
word_utf8 <- scan("data/sample_utf8.txt", what="", encoding="UTF-8")
word_utf8
word_utf8_new <- scan("data/sample_utf8.txt", what="") #문자열 형식을 읽을 땐 what이 꼭 필요
word_utf8_new
word_utf8_new <- scan("data/sample_utf8.txt", what="")
word_utf8_new # encoding 없으면 한글이 깨진다
word_utf8_new <- scan("data/sample_utf8.txt", what="", encoding="UTF-8") #문자열 형식을 읽을 땐 what이 꼭 필요
word_utf8_new # encoding 없으면 한글이 깨진다
lines_ansi <- readLines("data/sample_ansi.txt")
lines_utf8 <- readLines("data/sample_utf8.txt")
lines_utf8
word_utf8_new # encoding 없으면 한글이 깨진다
lines_ansi <- readLines("data/sample_ansi.txt")
lines_ansi
lines_utf8 <- readLines("data/sample_utf8.txt", encoding="UTF-8")
lines_utf8
#subset이 두번째 매개변수라 생략도 가능
unique(emp)
x <- c(10,2,7,4,15)
x
x[c(1,5)]
x[x %in% c(1,5)]
# summarise 에서 쓸 수 있는 함수는 ?summarise에서 확인
?summarise
install.packages('dplyr')
library(dplyr)
# summarise 에서 쓸 수 있는 함수는 ?summarise에서 확인
?summarise
# dpylr 패키지
# 가로로 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5, 6),  midterm = c(60, 80, 70, 90, 85, 100))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 5, 3, 4, 2, 7),  final = c(70, 83, 65, 95, 80, 0))
# id 기준으로 합치기
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐 total에 할당. 순서가 달라도 알아서 찾아준다.
total
test1
test2
# 세로로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80))
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all
group_a
group_b
group_all
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
df
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 이상치 포함된 데이터 생성 - sex 3, score 6
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1),  score = c(5, 4, 3, 4, 2, 6))
# 이상치 확인하기
table(outlier$sex)
table(outlier$score)
# 결측 처리하기 - sex
# sex가 3이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier$sex
# 데이터 시각화
국어<- c(4,7,6,8,5,5,9,10,4,10)
plot(국어) #국어 값이 y축, 자동으로 x축에는 index, 값이 점으로 찍힌다.
국어 <- c(4,7,6,8,5,5,9,10,4,10);
수학 <- c(7,4,7,3,8,10,4,10,5,7)
par(mar=c(5,5,5,5), mfrow=c(1,1))  #1행1렬로 원상태로 돌려줌
국어 <- c(4,7,6,8,5,5,9,10,4,10)
plot(국어, type="p", col="blue", main="type = p", xaxt="n", yaxt="n")
plot(국어, type="l", col="blue", main="type = l", xaxt="n", yaxt="n")
plot(국어, type="b", col="blue", main="type = b", xaxt="n", yaxt="n")
plot(국어, type="c", col="blue", main="type = c", xaxt="n", yaxt="n")
plot(국어, type="o", col="blue", main="type = o", xaxt="n", yaxt="n")
plot(국어, type="h", col="blue", main="type = h", xaxt="n", yaxt="n")
plot(국어, type="s", col="blue", main="type = s", xaxt="n", yaxt="n")
plot(국어, type="S", col="blue", main="type = S", xaxt="n", yaxt="n")
국어 <- c(4,7,6,8,5,5,9,10,4,10);
수학 <- c(7,4,7,3,8,10,4,10,5,7)
par(mar=c(5,5,5,5), mfrow=c(1,1))  #1행1렬로 원상태로 돌려줌
plot(국어, type="o", col="blue", ylim=c(0,10), axes=FALSE, ann=FALSE) # axes: 밖의 네모 선, ann: 인덱스
# x, y 축 추가하기 (따로 그리기)
axis(1, at=1:10, lab=c("01","02","03","04", "05","06","07","08","09","10")) # x축 추가
# 좌표 그릴 때 각각의 눈금 위치를 지정해준다.
# 첫번째 argument가 1이면 x축을 그린다. lab: label지정
axis(2, at=c(0,2,4,6,8,10))  # y축 추가
# 그래프 추가하고, 그래프에 박스 그리기
lines(수학, type="o", pch=16, lty=2, col="red")
box()   # 박스 그리기
# 그래프 제목, 축의 제목, 범례 나타내기
title(main="성적그래프", col.main="red", font.main=4) #주 제목들 지정
title(xlab="학번", col.lab=rgb(0,1,0))
# 16진법 이외에도 rbg함수로 색 지정 가능
legend(8,3, c("국어","수학"),
cex=0.6, col=c("blue","red"), pch=c(16,21), lty=c(1,2))
plot(성적$학번, 성적$국어, main="성적그래프", xlab="학번", ylab="점수",  xlim=c(0, 11), ylim=c(0, 11))
(성적 <- read.table("data/성적.txt", header=TRUE));
plot(성적$학번, 성적$국어, main="성적그래프", xlab="학번", ylab="점수",  xlim=c(0, 11), ylim=c(0, 11))
# barplot 막대그래프 그리기
barplot(국어) # default: 채워져잇는 회색 막대
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프",
xlab="학번", ylab="점수", border="red",
col="green", density=coldens, names.arg=xname)
# barplot 막대그래프 그리기
barplot(국어) # default: 채워져잇는 회색 막대
coldens <- seq(from=10, to=100, by=10)   # 막대그래프의 색밀도 설정을 위한 벡터
xname <- 성적$학번                                         # X 축 값 설정위한  벡터
barplot(성적$국어, main="성적그래프",
xlab="학번", ylab="점수", border="red",
col="green", density=coldens, names.arg=xname)
barplot(as.matrix(성적1), main="성적그래프", ylab="점수", beside=T, col=rainbow(10))
# 학생의 각 과목에 대한 각각의 점수에 대한 그래프
성적1<- 성적[3:5]
str(성적1)
par(mar=c(5,5,5,5), mfrow=c(1,1))
barplot(as.matrix(성적1), main="성적그래프", ylab="점수", beside=T, col=rainbow(10))
# 학생의 각 과목에 대한 합계 점수에 대한 그래프
par(mar=c(5,5,5,5), mfrow=c(1,1))
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));
# 우측에 범례가 들어갈 여백을 확보. 오른쪽만 더 4만큼 추가.
# xpd: 공간이 모자르면 마진공간까지 확장할지의 여부를 결정. 안 잘리게.
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
# 파이그래프
# default: 3시방향부터, 반시계방향
# 방향 바꾸고싶으면 clockwise=T, 이때는 12시방향부터 시작
(성적 <- read.table("data/성적.txt", header=TRUE));
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(성적$국어, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(성적$국어, density=10, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
# density 값이 커질수록 촘촘하게 채워준다
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10), main="국어성적", edges=10)
pie(성적$국어, labels=paste(성적$성명,"\n","(",성적$국어,")"), col=rainbow(10))
pie(rep(1, 24), col = rainbow(24), radius = 1)
radius; 반지름길이
# 히스토그램
# 연속형 수치 데이터의 분포를 파악. 전처리에 많이 사용.
par(mar=c(5,5,5,5))
hist(성적$국어, main="성적분포-국어", xlab="점수",
breaks=5, col = "lightblue", border = "pink")
# breaks=5: 5개 구간으로 나눠서 보여줘
hist(성적$수학, main="성적분포-수학", xlab="점수",
col = "lightblue", border = "pink")
# breaks: 따로 안 주면 알아서 정해진 계산법에 의해 알아서 계산.
hist(성적$국어, main="성적분포-국어", xlab="점수", ylab="도수",
col=rainbow(12), border = "pink")
nums <- sample(1:100, 30)
hist(nums)
# hist default: 검은색 border, 하얀색 col
# 따로 변수를 지정하지 않으면 x축은 도수가 됨
hist(nums, breaks=c(0,10,20,30,40,50,60,70,80,90,100))
nums <- sample(1:100, 30)
hist(nums)
(score <- sample(0:100, 30))
barplot(score)
nums <- sample(1:100, 30)
hist(nums)
# hist default: 검은색 border, 하얀색 col
# 따로 변수를 지정하지 않으면 x축은 도수가 됨
hist(nums, breaks=c(0,10,20,30,40,50,60,70,80,90,100))
(score <- sample(0:100, 30))
barplot(score)
hist(score)
hist(score, breaks=10)
hist(score, breaks=2) #?
hist(score, breaks=3) #?
hist(score, breaks=4) #?
hist(score, breaks=5) #?
hist(score, breaks=6) #?
hist(score, breaks=7) #?
# 박스플롯
summary(성적$국어)
boxplot(성적$국어, col="yellow",  ylim=c(0,10), xlab="국어", ylab="성적")
성적2 <- 성적[,3:5]
boxplot(성적2, col=rainbow(3), ylim=c(0,10), ylab="성적")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
search()
data(airquality)
str(airquality)
?ggplot
ggplot(airquality, aes(x=Day, y=Temp)) #밑그림
ggplot(airquality, aes(x=Day, y=Temp)) + geom_point()
airquality
ggplot(airquality, aes(x=Day, y=Temp)) + geom_point(size=3, color="red")
ggplot(airquality, aes(x=Day, y=Temp)) + geom_line()
ggplot(airquality, aes(x=Day, y=Temp)) + geom_line() + geom_point()
# 뒤에 오는 함수의 호출순서는 중요하지 않다
ggplot(airquality, aes(x=Day, y=Temp)) +
geom_line(color="green") + geom_point(size=3)
str(mtcars$cyl)
table(mtcars$cyl)
ggplot(mtcars, aes(x=cyl)) + geom_bar()
ggplot(mtcars, aes(x=cyl)) + geom_bar(width=0.5)
# width는 간격을 띄워주는 역할
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
# width는 간격을 띄워주는 역할
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x=cyl)) + geom_bar(width=0.5)
ggplot(mtcars, aes(x=cyl)) + geom_bar()
# width는 간격을 띄워주는 역할
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x=cyl)) + geom_bar()
mtcars$cyl
factor(mtcars$cyl)
ggplot(mtcars, aes(x=cyl)) + geom_bar()
# width는 간격을 띄워주는 역할
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(width=0.5)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear)), alpha=0.1)
# factor형: 정해진 범주의 값
# fill; gear데이터를 기준으로 각 기둥의 값들의 색깔이 나뉜다.
# alpha: 색의 진하기 0.0은 완전투명, 1.0은 완전불투명
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear))) + coord_polar()
# R데이터분석입문 책 220-221페이지 참조
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear))) + coord_polar(theta='y')
ggplot(airquality, aes(x=Day, y=Temp, group=Day)) + geom_boxplot()
ggplot(airquality, aes(Temp)) + geom_histogram()
ggplot(mtcars, aes(x=gear))+geom_bar()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_gray()
# x축만 지정해주면 알아서 개수를 세어서 bar graph를 그려준다.
# theme=gray가 default
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_bw()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_linedraw()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_light()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_dark()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_minimal()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_classic()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_void()
mpg <- as.data.frame(ggplot2::mpg)
mpg
str(mpg)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() + xlim(3, 6)   #x축 3에서 6만 보고싶을 때
classDF <- read.xlsx("data/data.xlsx", 1, encoding="UTF-8")
# A, B회사의 매출 실적 데이터프레임 만들기
company <- c('A', 'A', 'A', 'A', 'B', 'B', 'B', 'B')
year <- c('1980', '1990', '2000', '2010', '1980', '1990', '2000', '2010')
sales <- c(2750, 2800, 2830, 2840, 2760, 2765, 2775, 2790)
coSalesDF <- data.frame(company, year, sales)
# 생성된 coSalesDF 확인
coSalesDF
# 라인차트 생성 - x축은 연도(year), y축은 매출(sales) 매칭
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(aes(group=company))
#-------------------------------------------------------------
# 선 색상 및 두께 설정
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company,colour=company))
# colour도 되고 color도 된다. 알아서 범례도 넣어준다.
#-------------------------------------------------------------
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2)
install.packages("rvest")
library(rvest)
#URL Setting -> read_html() -> html_nodes() -> html_text()
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
nodes <- html_nodes(text, "div")
nodes
#URL Setting -> read_html() -> html_nodes() -> html_text()
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
nodes <- html_nodes(text, "div")
title <- html_text(nodes)
title
nodes
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
# div태그 중에서도 첫 번째를 찾아라
html_text(node1)
html_attr(node1, "style")
node2 <- html_nodes(text, "div:nth-of-type(2)")
node2
html_text(node2)
html_attr(node2, "style")
url <- "https://movie.naver.com/movie/point/af/list.nhn?page=1"
text <- read_html(url)
html_text(html_nodes(text, "#old_content > table > tbody > tr:nth-child(4) > td.title > a.movie"))
url <- "https://movie.naver.com/movie/point/af/list.nhn?page=1"
text <- read_html(url)
html_text(html_nodes(text, "#old_content > table > tbody > tr > td.title > a.movie"))
url <- "http://movie.naver.com/movie/point/af/list.nhn"
text <- read_html(url, encoding="CP949") #네이버가 EUC-KR이므로 encoding필요
text                                     #??? encoding 안해도 잘 나오는데 꼭 필요한가?
# 영화제목
nodes <- html_nodes(text,".movie")
nodes
title <- html_text(nodes)
title
# 영화리뷰
nodes <- html_nodes(text,".title")
nodes
review <- html_text(nodes, trim=TRUE)
review
review <- gsub("\t","",review)
review <- gsub("\r\n","",review)
review <- gsub("\n","",review)
review <- gsub("신고","",review)   #필요없는 것 지우기
review
GET 방식: 요청 URL 문자열 뒤 ? 기호 뒤에
POST 방식: 요청 바디
# OPEN API - 네이버블로그, 뉴스, 트위터, 공공DB
# NAVER OPEN API: https://developers.naver.com/main/
library(httr)
library(XML)
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
searchUrl
# Naver는 대부분의 open api가 url이며, 함수형식으로는 JavaScript가 있다.
Client_ID <- "izGsqP2exeThwwEUVU3x"   #네이버에 개발자로 등록해야 얻을 수 있다.
Client_Secret <- "WrwbQ1l6ZI"
# URLencode("여름추천요리") : 영문,숫자 이외의 값을 encoding 해준다.
# URLencode는 한글을 euc-kr로 인식. 한글 한 문자의 코드값이 2 byte
# 이대로 주면 Naver에서 인식 못한다.
query <- URLencode(iconv("여름추천요리","euc-kr","UTF-8"))
query
# iconv(): euc-kr파일을 utf-8 파일로 바꿔준다.
query
url<- paste(searchUrl, "?query=", query, "&display=20", sep="")
url
# sep=""은 paste0()와 기능이 똑같다.
doc<-GET(url, add_headers('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,'X-Naver-Client-Secret' = Client_Secret))
doc
# XML Package
doc1 <- htmlParse(doc, encoding="UTF-8")
doc1
text1<- xpathSApply(doc1, "//item/description", xmlValue)
text1
clicklog <- read.table("c://Rstudy/data/product_click.log")
head(clicklog)
colnames(clicklog) <- c("time","id")
barplot(table(clicklog$id),main="세로바 그래프 실습", col=terrain.colors(10),
xlab="상품ID", ylab="클릭수", names.arg=levels(clicklog$id))
clicklog
head(clicklog)
clicklog %>% group_by(id)
