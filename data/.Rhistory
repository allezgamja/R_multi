return(r)
}
df
df$w
sapply(df$w, myf)
sapply(df$w, myf, F)
rr1 <- sapply(df$w, myf, wt=F)
rr1
rr1 <- sapply(df$w, myf, wt=F)
df <- data.frame(w=weight, h=height)
apply(df, 1, sum, na.rm=TRUE) # 네번째 이후의 argument들은 필수는아니다.
# 가로 단위로 계산
apply(df, 2, sum, na.rm=TRUE) # 전체 대상자들의 키, 몸무게의 합
?apply
str(rr1)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(stringr)
useSejongDic()
install.packages("tm")   # textmining
library(tm)
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
cps
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps)
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
# Inf
# 문자의 개수 제한이 없도록
tdm
(m <- as.matrix(tdm))
(m <- as.matrix(tdm))
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
rowSums(m)
colSums(m)
m
t(m)
com <- m %*% t(m)  # 행렬곱
com
# t()는 행과 열을 바꿔준다.
com
com <- m %*% t(m)  # 행렬곱. 원래의 매트릭스에 행과 열을 바꾼 값을 행렬값 연산.
# t()는 행과 열을 바꿔준다.
com
install.packages("qgraph")
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*500))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*1000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*3000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
install.packages("proxy")
library(proxy)
# proxy함수는 유사도분석
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
cps
dtm <- DocumentTermMatrix(cps)
dtm
as.matrix(dtm)
inspect(dtm)
com <- m %*% t(m)
com
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
# 피타고라스
install.packages("lsa")
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
install.packages("SnowballC") # 어간추출을 위한 패키지
install.packages("wordcloud") # word-cloud generator
# Load
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
stopwords("english"
stopwords("english")
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
text <- readLines(filePath)
# VectorSource () 함수는 문자형 벡터 모음을 만듭니다.
docs <- Corpus(VectorSource(text))
# 텍스트의 특수 문자 등을 대체하기 위해 tm_map () 함수를 사용하여 변환이 수행됩니다.
# “/”,“@”및“|”을 공백으로 바꿉니다.
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
stopwords("english")
듀크 <- c(사과, 포도, 망고)
듀크 <- c("사과 포도 망고")
듀크
둘리 <- c("포도 자몽 자두")
또치 <- c("복숭아 사과 포도")
도우너 <- c("오렌지 바나나 복숭아")
길동 <- c("포도 바나나 망고")
희동 <- c("포도 귤 오렌지")
fruit <- c(듀크, 둘리, 또치, 도우너, 길동, 희동)
fruit
cps <- VCorpus(VectorSource(fruit))
cps
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps)
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
tdm
m <- as.matrix(tdm)
m
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
rowSums(m) # 어떤 음식을 가장 많이 먹었는지
m
rowSums(m)
max(rowSums(m))
sort(rowSums(m))
sort(rowSums(m), decreasing=T)
library(qgraph)
# 문제 1
colSums(m) # 각 학생이 얼마나 먹었는지
# 문제 1
com <- m %*% t(m)  # 행렬곱. 원래의 매트릭스에 행과 열을 바꾼 값을 행렬값 연산.
# t()는 행과 열을 바꿔준다.
com
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
source('C:/Rstudy/실습제출답안/tm1.R', encoding = 'UTF-8', echo=TRUE)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동동")
rowSums(m)
sort(rowSums(m), decreasing=T)
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
as.matrix(dtm)
as.matrix(dtm)
m <- as.matrix(dtm)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동")
m
cps <- Corpus(VectorSource(fruit))
fruit
cps <- VCorpus(VectorSource(fruit))
cps
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
tdm
as.matrix(tdm)
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
tdm
as.matrix(tdm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
cosine(com)
sort(cosine(com))
cosine(com)
str(cosine(com))
max(cosine(com))
unlist(cosine(com))
unlist(cosine(com)) - cosine(com)==1
unlist(cosine(com)) - cosine(com)
cosine(com)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cosine(com)
cosine(com)==1 <- NA
cos <- cosine(com)
cos <- cos[!(cos==0)]
cos
cos <- cos[!(cos==1)]
cos
com
cos <- cosine(com)
cos
cos==1
cos[!(cos==1)]
cos==1 <- NA
cos==1 <- "NA"
cos
cos
gsub("1", "***", cos)
cos <- gsub("1", "***", cos)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos
cos <- as.table(cosine(com))
cos
cos <- cos[!(cos==1)]
cos
cos <- as.table(cosine(com))
cos
cos <- cosine(com)
cos
cos <- as.list(cosine(com))
cos
cos <- cosine(com)
cos
install.pacakes("reshape2")
install.packages("reshape2")
library(reshape2)
head(french_fries)
mean(french_fries$potato)
french_fries$potato
mean(french_fries$potato)
french_fries %>% select(potato)
library(dplyr)
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato)
french_fries %>% select(potato) %>% summarise(mean <- mean(potato))
french_fries %>% select(potato) %>% summarise(mean())
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato))
str(french_fries)
french_fries %>% select(potato) %>% summarize(평균=mean(potato))
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% mean()
mean(french_fries$potato, na.rm=T)
french_fries %>% select(potato) %>% summarise(평균= mean(), na.rm=T)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
library(dplyr)
m %>% group_by(potato) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
v
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
# reshape2: 데이터셋의 구조를 바꿔준다.
library(reshape2)
head(french_fries)
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
r <- dcast(m, time+treatment+subject + rep ~ ...)
# id 해당되는 이름을 엮는다. time~rep까지 사용하고 나머지 값을 갖다붙인다.
# 이때는 variable에 있는 애들이 변수값이 된다.
# decast; metl된 것을 다시 원래대로 되돌리겠다.
head(r)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
?next
library(dplyr)
getwd()
setwd('c://Rstudy/data')
# 1-1
clicklog <- read.table("c://Rstudy/data/exam_product_click.log")
head(clicklog)
str(clicklog)
colnames(clicklog) <- c("time","id")
df <- as.data.frame(clicklog)
# 1-2
df %>% group_by(id) %>% summarise(n = n())
# 1-3
df %>% group_by(id) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(1)
# 1-4
clickhr <- format(strptime(clicklog$time, "%Y%m%d%H%M"), "%H")
clickhr <- as.data.frame(clickhr)
colnames(clickhr) <- "time"
clickhr %>% group_by(time) %>% summarise(n = n())
# 1-5
clickhr %>% group_by(time) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(1)
# 1-6
month <- format(strptime(clicklog$time, "%Y%m%d%H%M"), "%m")
df_dec <- df %>% mutate(month) %>% filter(month=="12") %>% group_by(id) %>% summarise(n=n())%>%arrange(n)
df_dec_new <- as.data.frame(df_dec)
df_dec_graph <- df %>% mutate(month) %>% filter(month=="12")
library(ggplot2)
ggplot(df_dec_graph, aes(x=id))+geom_bar(color="green") + labs(x="상품id",y="판매량", title="12월 상품id별 판매량") + theme_bw()
barplot(df_dec_graph)
barplot(as.matrix(df_dec_graph))
barplot(as.matrix(df_dec_graph$id))
barplot(as.matrix(df_dec_graph)$id)
df_dec_graph$id
barplot(as.matrix(df_dec_graph$id))
df_dec_graph$id
as.matrix(df_dec_graph$id)
df_m <- as.matrix(df_dec_graph$id)
barplot(df_m)
df_dec_graph$id
barplot(as.matrix(성적1), main="성적그래프", ylab="점수", col=rainbow(10))
(성적 <- read.table("성적.txt", header=TRUE));
xname <- 성적$학번;    #  x축 레이블용 벡터
xname
str(xname)
df_m <- as.vector(df_dec_graph$id)
df_m
barplot(df_m)
str(df_m)
국어 <- c(4,7,6,8,5,5,9,10,4,10)
국어
png(filename="exam2.png", height=400, width=700, bg="white")
ggplot(df_dec_graph, aes(x=id))+geom_bar(color="green") + labs(x="상품id",y="판매량", title="12월 상품id별 판매량") + theme_bw()
dev.off()
getwd()
hotel = readLines("exam_hotel.txt", encoding = "UTF-8")
hotel
library(KoNLP)
library(wordcloud)
useSejongDic()
hotel = readLines("exam_hotel.txt", encoding = "UTF-8")
hotel_review = readLines("exam_hotel.txt", encoding = "UTF-8")
hotel_review
words <- extractNoun(hotel_review)
words
unlist_words <- unlist(words)
unlist_words
un_words <- unlist(words)
un_data <- Filter(function(x) {nchar(x) >= 2}, un_words)
un_data
word_table <- table(un_data)
word_table
final <- sort(word_table, decreasing = TRUE)
head(final, 10)
a = [{(10+10)/(10+10+15+65)} * {(10+15)/(10+10+15+65)}] * (10+10+15+65)
b = [{(10+10)/(10+10+15+65)} * {(10+65)/(10+10+15+65)}] * (10+10+15+65)
c = [{(15+10)/(10+10+15+65)} * {(15+65)/(10+10+15+65)}] * (10+10+15+65)
d = [{(65+10)/(10+10+15+65)} * {(65+15)/(10+10+15+65)}] * (10+10+15+65)
a = {(10+10)/(10+10+15+65)} * {(10+15)/(10+10+15+65)} * (10+10+15+65)
b = {(10+10)/(10+10+15+65)} * {(10+65)/(10+10+15+65)} * (10+10+15+65)
c = {(15+10)/(10+10+15+65)} * {(15+65)/(10+10+15+65)} * (10+10+15+65)
d = {(65+10)/(10+10+15+65)} * {(65+15)/(10+10+15+65)} * (10+10+15+65)
a = {(10+10)/(10+10+15+65)} * {(10+15)/(10+10+15+65)} * (10+10+15+65)
a = {(10+10)/(10+10+15+65)} * {(10+15)/(10+10+15+65)} * (10+10+15+65) # 비만 & 당뇨
b = {(10+10)/(10+10+15+65)} * {(10+65)/(10+10+15+65)} * (10+10+15+65) # 비만 & 정상
c = {(15+10)/(10+10+15+65)} * {(15+65)/(10+10+15+65)} * (10+10+15+65) # 정상체중 & 당뇨
d = {(65+10)/(10+10+15+65)} * {(65+15)/(10+10+15+65)} * (10+10+15+65) # 정상체중 & 정상
a
print(a,b,c,d)
print()
print(a)
print(c(a,b,c,d))
(10 - 5)^2
(10 - 5)^2 / 5
(10-5)^2 / 5
(10-15)^2 / 15
(15-20)^2 / 20
(65-60)^2 / 60
a = {(10+10)/(10+10+15+65)} * {(10+15)/(10+10+15+65)} * (10+10+15+65) # 비만 & 당뇨
a
d2 = (65-60)^2 / 60 # 정상체중 & 정상
a2 = (10-5)^2 / 5   # 비만 & 당뇨
b2 = (10-15)^2 / 15 # 비만 & 정상
c2 = (15-20)^2 / 20 # 정상체중 & 당뇨
d2 = (65-60)^2 / 60 # 정상체중 & 정상
## II-3 전체 카이제곱 값
chi = a2+b2+c2+d2
print(chi)
## II-4 카이제곱의 자유도
n = (2-1) * (2-1)
print(n)
print(c(a2,b2,c2,d2))
print(chi)
df_dec_new
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n)
df_dec_graph
df_dec_new
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n)
df_dec_new
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$id)
df_dec_new
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n)
plot(df_dec_new$n)
df_dec_new
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new)
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n)
df_dec_new
df_dec_new
class(df_dec_new)
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$id)
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$id, names.arg = df_dec_new$id)
df_dec
df_dec_new <- as.data.frame(df_dec)
df_dec_new
str(df_dec_new)
plot(df_dec_new)
barplot(df_dec_new)
df_dec_new
class(df_dec_new$n)
ggplot(df_dec_graph, aes(x=id))+geom_bar(color="green") + labs(x="상품id",y="판매량", title="12월 상품id별 판매량") + theme_bw()
?barplopt
?barplot
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n, names.arg = df_dec_new$id)
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n)
### df_graph <- df_dec_new[2:14,]
barplot(df_dec_new$n, names.arg = df_dec_new$id)
